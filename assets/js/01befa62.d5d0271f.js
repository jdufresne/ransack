"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[3939],{3905:function(e,r,n){n.d(r,{Zo:function(){return p},kt:function(){return f}});var t=n(7294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function s(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=t.createContext({}),l=function(e){var r=t.useContext(c),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},p=function(e){var r=l(e.components);return t.createElement(c.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},d=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),f=o,h=d["".concat(c,".").concat(f)]||d[f]||u[f]||a;return n?t.createElement(h,i(i({ref:r},p),{},{components:n})):t.createElement(h,i({ref:r},p))}));function f(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var c in r)hasOwnProperty.call(r,c)&&(s[c]=r[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},576:function(e,r,n){n.r(r),n.d(r,{assets:function(){return c},contentTitle:function(){return i},default:function(){return u},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return l}});var t=n(3117),o=(n(7294),n(3905));const a={sidebar_position:5,title:"Merging searches"},i=void 0,s={unversionedId:"going-further/merging-searches",id:"going-further/merging-searches",title:"Merging searches",description:"To find records that match multiple searches, it's possible to merge all the ransack search conditions into an ActiveRecord relation to perform a single query. In order to avoid conflicts between joined table names it's necessary to set up a shared context to track table aliases used across all the conditions before initializing the searches:",source:"@site/docs/going-further/merging-searches.md",sourceDirName:"going-further",slug:"/going-further/merging-searches",permalink:"/ransack/going-further/merging-searches",draft:!1,editUrl:"https://github.com/activerecord-hackery/ransack/edit/main/docs/docs/going-further/merging-searches.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"Merging searches"},sidebar:"tutorialSidebar",previous:{title:"Form customisation",permalink:"/ransack/going-further/form-customisation"},next:{title:"Ransackers",permalink:"/ransack/going-further/ransackers"}},c={},l=[],p={toc:l};function u(e){let{components:r,...n}=e;return(0,o.kt)("wrapper",(0,t.Z)({},p,n,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"To find records that match multiple searches, it's possible to merge all the ransack search conditions into an ActiveRecord relation to perform a single query. In order to avoid conflicts between joined table names it's necessary to set up a shared context to track table aliases used across all the conditions before initializing the searches:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby"},'shared_context = Ransack::Context.for(Person)\n\nsearch_parents = Person.ransack(\n  { parent_name_eq: "A" }, context: shared_context\n)\n\nsearch_children = Person.ransack(\n  { children_name_eq: "B" }, context: shared_context\n)\n\nshared_conditions = [search_parents, search_children].map { |search|\n  Ransack::Visitor.new.accept(search.base)\n}\n\nPerson.joins(shared_context.join_sources)\n  .where(shared_conditions.reduce(&:or))\n  .to_sql\n')),(0,o.kt)("p",null,"Produces:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT "people".*\nFROM "people"\nLEFT OUTER JOIN "people" "parents_people"\n  ON "parents_people"."id" = "people"."parent_id"\nLEFT OUTER JOIN "people" "children_people"\n  ON "children_people"."parent_id" = "people"."id"\nWHERE (\n  ("parents_people"."name" = \'A\' OR "children_people"."name" = \'B\')\n  )\nORDER BY "people"."id" DESC\n')),(0,o.kt)("p",null,"Admittedly this is not as simple as it should be, but it's workable for now. (Implementing ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/activerecord-hackery/ransack/issues/417"},"issue 417")," could make this more straightforward.)"))}u.isMDXComponent=!0}}]);