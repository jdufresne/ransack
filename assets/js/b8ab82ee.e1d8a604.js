"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[4510],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),d=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},u=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=d(r),m=a,f=p["".concat(s,".").concat(m)]||p[m]||l[m]||o;return r?n.createElement(f,c(c({ref:t},u),{},{components:r})):n.createElement(f,c({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,c=new Array(o);c[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var d=2;d<o;d++)c[d]=r[d];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},383:function(e,t,r){r.r(t),r.d(t,{assets:function(){return s},contentTitle:function(){return c},default:function(){return l},frontMatter:function(){return o},metadata:function(){return i},toc:function(){return d}});var n=r(3117),a=(r(7294),r(3905));const o={sidebar_position:2,title:"Advanced Mode"},c=void 0,i={unversionedId:"getting-started/advanced-mode",id:"getting-started/advanced-mode",title:"Advanced Mode",description:'"Advanced" searches Rails\'s nested attributes functionality in order to',source:"@site/docs/getting-started/advanced-mode.md",sourceDirName:"getting-started",slug:"/getting-started/advanced-mode",permalink:"/ransack/getting-started/advanced-mode",draft:!1,editUrl:"https://github.com/activerecord-hackery/ransack/edit/main/docs/docs/getting-started/advanced-mode.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Advanced Mode"},sidebar:"tutorialSidebar",previous:{title:"Simple mode",permalink:"/ransack/getting-started/simple-mode"},next:{title:"Configuration",permalink:"/ransack/getting-started/configuration"}},s={},d=[{value:"Tweak your routes",id:"tweak-your-routes",level:2},{value:"Add a controller action",id:"add-a-controller-action",level:2},{value:"Update your form",id:"update-your-form",level:2}],u={toc:d};function l(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,'"Advanced" searches Rails\'s nested attributes functionality in order to\ngenerate complex queries with nested AND/OR groupings, etc. This takes a bit\nmore work but can generate some pretty cool search interfaces that put a lot of\npower in the hands of your users.'),(0,a.kt)("p",null,"A notable drawback with these searches is\nthat the increased size of the parameter string will typically force you to use\nthe HTTP POST method instead of GET."),(0,a.kt)("h2",{id:"tweak-your-routes"},"Tweak your routes"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"resources :people do\n  collection do\n    match 'search' => 'people#search', via: [:get, :post], as: :search\n  end\nend\n")),(0,a.kt)("h2",{id:"add-a-controller-action"},"Add a controller action"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"def search\n  index\n  render :index\nend\n")),(0,a.kt)("h2",{id:"update-your-form"},"Update your form"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-erb"},"<%= search_form_for @q, url: search_people_path,\n                        html: { method: :post } do |f| %>\n")),(0,a.kt)("p",null,"Once you've done so, you can make use of the helpers in ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/activerecord-hackery/ransack/blob/main/lib/ransack/helpers/form_builder.rb"},"Ransack::Helpers::FormBuilder")," to\nconstruct much more complex search forms, such as the one on the\n",(0,a.kt)("a",{parentName:"p",href:"http://ransack-demo.herokuapp.com/users/advanced_search"},"demo app"),"\n(source code ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/activerecord-hackery/ransack_demo"},"here"),")."))}l.isMDXComponent=!0}}]);