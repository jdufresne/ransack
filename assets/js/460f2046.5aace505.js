"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[1782],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return f}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=u(t),f=o,m=d["".concat(s,".").concat(f)]||d[f]||l[f]||a;return t?r.createElement(m,i(i({ref:n},p),{},{components:t})):r.createElement(m,i({ref:n},p))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var u=2;u<a;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7864:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return i},default:function(){return l},frontMatter:function(){return a},metadata:function(){return c},toc:function(){return u}});var r=t(3117),o=(t(7294),t(3905));const a={sidebar_position:2,title:"CSV Export"},i=void 0,c={unversionedId:"going-further/exporting-to-csv",id:"going-further/exporting-to-csv",title:"CSV Export",description:"Exporting to CSV",source:"@site/docs/going-further/exporting-to-csv.md",sourceDirName:"going-further",slug:"/going-further/exporting-to-csv",permalink:"/ransack/going-further/exporting-to-csv",draft:!1,editUrl:"https://github.com/activerecord-hackery/ransack/edit/main/docs/docs/going-further/exporting-to-csv.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"CSV Export"},sidebar:"tutorialSidebar",previous:{title:"Custom predicates",permalink:"/ransack/going-further/custom-predicates"},next:{title:"i18n",permalink:"/ransack/going-further/i18n"}},s={},u=[],p={toc:u};function l(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Exporting to CSV"),(0,o.kt)("p",null,"Example downloading a csv file preserving ransack search, based on ",(0,o.kt)("a",{parentName:"p",href:"https://gist.github.com/pama/adff25ed1f4b796ce088ea362a08e1c5"},"this gist")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby",metastring:"title='index.html.erb'",title:"'index.html.erb'"},"<h1>Users</h1>\n\n<%= search_form_for @q, url: dashboard_index_path do |f| %>\n  <%= f.label :name_cont %>\n  <%= f.search_field :name_cont %>\n\n  <%= f.submit %>\n<% end %>\n\n<ul>\n  <% @users.each do |user| %>\n    <li><%= user.name %> [<%= user.devices.map {|device| device.name }.join(', ') %>]</li>\n  <% end %>\n</ul>\n\n<% if params[:q] %>\n  <%= link_to 'Export 1', dashboard_index_path({name: params[:q][:name_cont]}.merge({format: :csv})) %>\n<% else %>\n  <%= link_to 'Export 2', dashboard_index_path(format: 'csv') %>\n<% end %>\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby",metastring:"title='user.rb'",title:"'user.rb'"},"require 'csv'\n\nclass User < ApplicationRecord\n  has_many :devices\n\n  def self.get_csv(users)\n    CSV.generate do |csv|\n      csv << [\"Name\", \"Devices\"]\n\n      users.each do |user|\n        csv << [user.name, user.devices.map{|device| device.name}.join(', ')]\n      end\n    end\n  end\nend\n")))}l.isMDXComponent=!0}}]);